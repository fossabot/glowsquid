name: CI

on:
  push:
    branches: ["main", "dev"]
  pull_request:
    types: [opened, synchronize]

env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

jobs:
  build-test:
    name: Build + Test
    runs-on: ${{ matrix.os }}
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      OS: ${{ matrix.os }}
      MICROSOFT_CLIENT_SECRET: ${{ secrets.MICROSOFT_CLIENT_SECRET }}
      MICROSOFT_CLIENT_ID: ${{ secrets.MICROSOFT_CLIENT_ID }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      # Setup
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: pnpm/action-setup@v2.2.2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: install dependencies (ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: >-
          sudo apt-get update &&
          sudo apt-get install -y
          libgtk-3-dev
          libgtksourceview-3.0-dev
          webkit2gtk-4.0
          libappindicator3-dev
          webkit2gtk-driver
          xvfb

      - name: install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - uses: actions/cache@v3
        id: cargo-cache
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies
        run: pnpm i 

      - name: Install tauri-driver
        uses: actions-rs/cargo@v1
        if: matrix.os != 'macos-latest' && steps.cargo-cache.outputs.cache-hit != 'true'
        with:
          command: install
          args: tauri-driver

      - name: prepare things
        run: pnpm run prep

      - name: build
        run: pnpm build

      # Tests
      - name: Test (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: xvfb-run pnpm test

      # Testing doesn't work
      - name: Test (Windows)
        if: matrix.os == 'windows-latest'
        run: echo TODO: windows testing

      - name: Test (Macos)
        if: matrix.os == 'macos-latest'
        run: echo TODO: windows testing

      # Artifact uploads
      - uses: actions/upload-artifact@v3
        if: matrix.os == 'ubuntu-latest'
        with:
          name: linux-build
          path: |
            ./apps/oxidize/target/release/bundle/appimage/glowsquid_*.AppImage
            ./apps/oxidize/target/release/bundle/deb/glowsquid_*.deb

      - uses: actions/upload-artifact@v3
        if: matrix.os == 'windows-latest'
        with:
          name: windows-build
          path: ./apps/oxidize/target/release/bundle/msi/*

      - uses: actions/upload-artifact@v3
        if: matrix.os == 'macos-latest'
        with:
          name: macos-build
          path: |
            ./apps/oxidize/target/release/bundle/macos/Glowsquid.app
            ./apps/oxidize/target/release/bundle/macos/Glowsquid_*.dmg

  chromatic-deployment:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - uses: pnpm/action-setup@v2.2.2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: prepare project
        run: pnpm run prep

      - name: Publish to Chromatic
        uses: chromaui/action@v1
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          workingDir: ./libs/glow-ui
